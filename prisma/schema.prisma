// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  MANAGER
  ADMIN
  PARTNER
  PICKER
  DELIVERY
}

enum ProductStatus {
  UNDER_REVIEW
  UNDER_PICKING
  PICKED
  APPROVED
  FILTRATION
  UNDER_DELIVERING
  DELIVERED
  COMPLETED
  CANCELED
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  firstname    String
  phone        String       @unique
  lastname     String
  email        String       @unique
  password     String
  salt         String
  role         Role
  delivery_boy DeliveryBoy?
  partner      Partner?
  pick_boy     PickBoy?
  is_allowed   Boolean      @default(false)
  image_url    String?
}

model Partner {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  token      String      @unique @default(uuid())
  orders     Order[]
  suppliers  Supplier[]
  profit     Float       @default(0.0)
  financials Financial[]
}

model Order {
  id             Int           @id @default(autoincrement())
  order_id       Int
  products       Product[]
  partner        Partner       @relation(fields: [partnerId], references: [id])
  partnerId      Int
  total_pieces   Float
  recipient      String
  total_price    Float
  delivery_price Float
  payment        PaymentMethod @relation(fields: [payment_method], references: [name])
  payment_method String
  created_at     DateTime      @default(value: now())
  deliveries     Delivery[]
  lat            Float
  lon            Float
  note           String?
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  total_pieces Float         @default(1.0)
  dimensions   String?
  weight       String?
  supplier     Supplier      @relation(fields: [supplierId], references: [id])
  supplierId   Int
  order        Order?        @relation(fields: [orderId], references: [id])
  orderId      Int?
  times        DateTime[]
  pick         Pick?         @relation(fields: [pickId], references: [id])
  pickId       Int?
  status       ProductStatus @default(UNDER_REVIEW)
  note         String?
  img_url      String?
}

model Supplier {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String    @unique
  lat       Float
  lon       Float
  partner   Partner   @relation(fields: [partnerId], references: [id])
  partnerId Int
  product   Product[]
}

model Delivery {
  id             Int         @id @default(autoincrement())
  total_location Int
  total_pieces   Float
  delivery_boy   DeliveryBoy @relation(fields: [delivery_boyId], references: [id])
  delivery_boyId Int
  orders         Order[]

}

model DeliveryBoy {
  id       Int        @id @default(autoincrement())
  delivery Delivery[]
  user     User       @relation(fields: [userId], references: [id])
  userId   Int
}

model Pick {
  id             Int       @id @default(autoincrement())
  total_location Int
  total_pieces   Float
  pick_boy       PickBoy?  @relation(fields: [pick_boyId], references: [id])
  pick_boyId     Int?
  products       Product[]
}

model PickBoy {
  id     Int    @id @default(autoincrement())
  pick   Pick[]
  user   User   @relation(fields: [userId], references: [id])
  userId Int

}

model City {
  id    Int    @id @default(autoincrement())
  name  String @unique
  zones Zone[]
}

model Zone {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  city      City       @relation(fields: [cityId], references: [id])
  cityId    Int
  price     Float
  locations Location[]
}

model PaymentMethod {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  orders     Order[]
  take_money Boolean @default(false)
  img_url    String?
}

model Location {
  id     Int   @id @default(autoincrement())
  lat    Float
  lon    Float
  zone   Zone  @relation(fields: [zoneId], references: [id])
  zoneId Int
}

enum Transaction {
  DEBT
  DUES
}

enum FinancialStatus {
  UNDER_REVIEW
  DONE
}

model Financial {
  id          Int             @id @default(autoincrement())
  amount      Float
  partner     Partner         @relation(fields: [partnerId], references: [id])
  partnerId   Int
  transaction Transaction
  status      FinancialStatus @default(UNDER_REVIEW)
  created_at  DateTime        @default(now())
  updated_at  DateTime?       @updatedAt
  note        String?
}
