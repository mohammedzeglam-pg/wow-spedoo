// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// TODO: babe you need to use migration after get to prod
datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL") || "postgresql://USER:PASSWORD@HOST:PORT/DATABASE"
  url      = "postgresql://postgres:postgres@localhost:5432/test"
}

generator client {
  provider = "prisma-client-js"
}

//  User schema stuff

enum Role {
  MANAGER
  ADMIN
  PARTNER
  PICKER
  DELIVERY
}
//TODO: i think we need more effecinet system to track this shit
// any change in this three enum would be added to  TimeTracking
// do that because important
enum DeliveryStatus {
  UNDER_DELIVERING
  COMPLETED
  CANCELED
}

enum OrderStatus {
  UNDER_REVIEW
  PICKING
  FILTERION
  DELIVERING
  COMPLETED
  CANCELED
}
enum PickStatus {
  UNDER_PICKING
  COMPLETED
  CANCELED
}
enum TimeTracking{
  UNDER_REVIEW
  UNDER_PICKING
  PICKING_COMPLETED
  PICKING_CANCELED
  FILTERION
  UNDER_DELIVERING
  DELIVERING_COMPLETED
  DELIVERING_CANCELED
  COMPLETED
  CANCELED
}
enum PaymentMethod {
  SDAD
  CASH_ON_DELIVERY
}
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  firstname String
  phone     Int      @unique
  lastname  String
  email     String   @unique
  password  String
  salt      String
  role      Role
  partner   Partner?
  pick_boy  PickBoy?
  delivery_boy  DeliveryBoy?
}

// Partner
model Partner {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  api_key  String?  @unique
  orders   Order[]
  suppliers Supplier[]
}

// Order schema

model Order {
  id               Int           @id @default(autoincrement())
  order_id Int
  products         Product[]
  partner          Partner       @relation(fields: [partnerId], references: [id])
  partnerId        Int
  total_pieces     Int
//  recipient        String?
  total_price      Int
  delivery_price   Int?
  payment_method   PaymentMethod
  status           OrderStatus
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  latitude  String
  longitude String
}

model Product {
  id        Int    @id @default(autoincrement())
  name      String
  total_pieces     Int @default(1)
  dimensions String
  weight    String
  supplier  Supplier     @relation(fields: [supplierId], references: [id])
  supplierId   Int
  order    Order?  @relation(fields: [orderId], references: [id])
  orderId  Int?
  times Time[]
  delivery     Delivery?     @relation(fields: [deliveryId], references: [id])
  deliveryId   Int?
  pick     Pick?     @relation(fields: [pickId], references: [id])
  pickId   Int?
}

model Supplier {
  id        Int     @id @default(autoincrement())
  name      String
  phone     Int
  latitude  String
  longitude String
  partner   Partner @relation(fields: [partnerId], references: [id])
  partnerId Int
  product   Product[]
}


model Pick {
  id             Int        @id @default(autoincrement())
  total_location Int
  total_pieces   Int
  status         PickStatus
  pick_boy      PickBoy?  @relation(fields:[pick_boyId],references:[id])
  pick_boyId    Int?
  products Product[]
}
model PickBoy{
  id             Int            @id @default(autoincrement())
  name          String
  pick          Pick[]
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
}

model Delivery {
  id             Int            @id @default(autoincrement())
  total_location Int
  total_pieces   Int
  status         DeliveryStatus
  delivery_boy   DeliveryBoy   @relation(fields: [delivery_boyId], references: [id])
  delivery_boyId Int
  products Product[]
}

model DeliveryBoy{
  id             Int            @id @default(autoincrement())
  name          String
  delivery      Delivery[]
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
}
// Zones
model Zone {
  id    Int    @id @default(autoincrement())
  name  String @unique
  regions Region[]
}

// Region
model Region {
  id     Int    @id @default(autoincrement())
  name   String
  zone   Zone   @relation(fields: [zoneId], references: [id])
  zoneId Int
}

model Time{
  id     Int    @id @default(autoincrement())
  time  DateTime  @default(now())
  status  TimeTracking
  product Product @relation(fields:[productId],references:[id])
  productId Int
}
