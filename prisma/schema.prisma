// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// TODO: babe you need to use migration after get to prod
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


enum Role {
  MANAGER
  ADMIN
  PARTNER
  PICKER
  DELIVERY
}
enum ProductStatus{
  UNDER_REVIEW
  UNDER_PICKING
  PICKED
  APPROVED
  FILTERION
  UNDER_DELIVERING
  COMPLETED
  CANCELED
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  firstname String
  phone     String      @unique
  lastname  String
  email     String   @unique
  password  String
  salt      String
  role      Role
  partner   Partner?
  pick_boy  PickBoy?
  delivery_boy  DeliveryBoy?
  isAllowed Boolean @default(true)
  @@map(name:"users")
}

model Partner {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  token String  @default(uuid()) @unique
  orders   Order[]
  suppliers Supplier[]
  @@map(name:"partners")
}


model Order {
  id               Int           @id @default(autoincrement())
  order_id Int
  products         Product[]
  partner          Partner       @relation(fields: [partnerId], references: [id])
  partnerId        Int
  total_pieces     Int
  recipient        String
  total_price      Int
  delivery_price   Int?
  payment   PaymentMethod   @relation(fields:[payment_method],references:[name])
  payment_method  String
  created_at DateTime @default(value:now())
//  updated_at DateTime? @updatedAt
  lat  String
  lon String
  note      String?
  @@map(name:"orders")
}

model Product {
  id        Int    @id @default(autoincrement())
  name      String
  total_pieces     Int @default(1)
  dimensions String?
  weight    String?
  supplier  Supplier     @relation(fields: [supplierId], references: [id])
  supplierId   Int
  order    Order?  @relation(fields: [orderId], references: [id])
  orderId  Int?
  times DateTime[]
  delivery     Delivery?     @relation(fields: [deliveryId], references: [id])
  deliveryId   Int?
  pick     Pick?     @relation(fields: [pickId], references: [id])
  pickId   Int?
  status  ProductStatus @default(UNDER_REVIEW)
  @@map(name:"products")
}

model Supplier {
  id        Int     @id @default(autoincrement())
  name      String
  phone     String @unique
  lat  String?
  lon String?
  partner   Partner @relation(fields: [partnerId], references: [id])
  partnerId Int
  product   Product[]
  street  Street?  @relation(fields:[streetId], references:[id])
  streetId  Int?
  @@map(name:"suppliers")
}


model Pick {
  id             Int        @id @default(autoincrement())
  total_location Int
  total_pieces   Int
  pick_boy      PickBoy?  @relation(fields:[pick_boyId],references:[id])
  pick_boyId    Int?
  products Product[]

  @@map(name:"pick")
}

model PickBoy{
  id             Int            @id @default(autoincrement())
  pick          Pick[]
  user     User     @relation(fields: [userId], references: [id])
  userId   Int

  @@map(name:"pick_boy")
}

model Delivery {
  id             Int            @id @default(autoincrement())
  total_location Int
  total_pieces   Int
  delivery_boy   DeliveryBoy   @relation(fields: [delivery_boyId], references: [id])
  delivery_boyId Int
  products Product[]

  @@map(name:"delivery")
}

model DeliveryBoy{
  id             Int            @id @default(autoincrement())
  delivery      Delivery[]
  user     User     @relation(fields: [userId], references: [id])
  userId   Int

  @@map(name:"delivery_boy")
}

model City{
  id    Int    @id @default(autoincrement())
  name  String @unique
  regions Region[]
  @@map(name:"cities")
}
model Region{
  id     Int    @id @default(autoincrement())
  name   String
  city   City   @relation(fields: [cityId], references: [id])
  cityId Int
  streets Street[]
  @@map(name:"regions")
}
model Street{
  id     Int    @id @default(autoincrement())
  name   String
  lat  String?
  lon String?
  price   Int?
  region   Region  @relation(fields: [regionId],references:[id])
  regionId  Int
  suppliers   Supplier[]
  @@map(name:"streets")
}

//model Time{
//  id     Int    @id @default(autoincrement())
//  time  DateTime  @default(now())
//  product Product @relation(fields:[productId],references:[id])
//  status   ProductStatus @default(UNDER_REVIEW)
//  productId Int
//  @@map(name:"times")
//}

model PaymentMethod {
  id     Int    @id @default(autoincrement())
  name  String  @unique
  orders Order[]
  @@map(name:"payment_nethods")
}
